{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"GIS MCP Server Getting Started Installations API Reference Examples Contributing GitHub Model Context Protocol \u00b7 Geospatial Bring real GIS analysis to your AI assistants. GIS MCP Server is the backend for your GIS AI Agent <p>The MCP server that connects GIS Libraries(Shapely, PyProj, GeoPandas, Rasterio, and PySAL, etc) to LLMs \u2014 enabling precise geospatial operations, projections, raster processing, and spatial statistics in natural language workflows.</p> Getting Started Explore API Subscribe for GIS AI News"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to GIS MCP Server! We welcome issues, ideas, docs, and code.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to contribute","text":"<ul> <li>Report bugs and request features via GitHub Issues</li> <li>Improve documentation and examples</li> <li>Add or refine MCP tools (Shapely, PyProj, GeoPandas, Rasterio, PySAL)</li> <li>Triage issues, review PRs</li> </ul>"},{"location":"contributing/#development-setup","title":"Development setup","text":"<ol> <li>Fork and clone the repo</li> <li>Create a Python 3.10+ virtual environment and install in editable mode:</li> </ol> <pre><code>pip install uv\nuv venv --python=3.10\nuv pip install -e .\n</code></pre> <ol> <li>Run the server from source:</li> </ol> <pre><code>python -m gis_mcp\n</code></pre> <ol> <li> <p>Optional: integrate with your MCP client for local development</p> </li> <li> <p>Claude Desktop (Windows):</p> </li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\path\\\\to\\\\gis-mcp\\\\.venv\\\\Scripts\\\\python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n</code></pre> <ul> <li>Claude Desktop (Linux/Mac):</li> </ul> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/path/to/gis-mcp/.venv/bin/python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n</code></pre>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request guidelines","text":"<ul> <li>Create a feature branch from main</li> <li>Keep edits focused and small; add tests or examples when applicable</li> <li>Ensure docs are updated for any user-facing changes</li> <li>Follow the project code style and type annotations</li> </ul>"},{"location":"contributing/#reporting-security-issues","title":"Reporting security issues","text":"<p>Please do not open a public issue. Email the maintainer or use GitHub\u2019s private security advisories.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions are licensed under the repository\u2019s MIT license.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide helps you install and run the GIS MCP Server quickly using pip (with uv) and shows how to connect it to your IDE/client.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Internet access to install packages</li> </ul>"},{"location":"getting-started/#install-via-pip-with-uv","title":"Install via pip (with uv)","text":"<ol> <li>Create a virtual environment:</li> </ol> <pre><code>pip install uv\nuv venv --python=3.10\n</code></pre> <ol> <li>Install the package:</li> </ol> <pre><code>uv pip install gis-mcp\n</code></pre> <ol> <li>Run the server:</li> </ol> <pre><code>gis-mcp\n</code></pre>"},{"location":"getting-started/#connect-to-an-mcp-client","title":"Connect to an MCP client","text":"<p>Claude Desktop (Windows):</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\Users\\\\YourUsername\\\\.venv\\\\Scripts\\\\gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n</code></pre> <p>Claude Desktop (Linux/Mac):</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/home/YourUsername/.venv/bin/gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n</code></pre> <p>Cursor IDE (Windows) \u2013 <code>.cursor/mcp.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\Users\\\\YourUsername\\\\.venv\\\\Scripts\\\\gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n</code></pre> <p>Cursor IDE (Linux/Mac) \u2013 <code>.cursor/mcp.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/home/YourUsername/.venv/bin/gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n</code></pre> <p>This video teaches you the installation of GIS MCP Server on your windows and Claude Desktop:</p> <p>Notes</p> <ul> <li>Replace <code>YourUsername</code> with your actual username</li> <li>Restart your IDE after adding configuration</li> </ul>"},{"location":"getting-started/#optional-features-extras","title":"Optional Features &amp; Extras","text":"<p>GIS MCP Server supports several optional features for specialized workflows. You can install these extras using pip with square brackets, e.g.:</p> <pre><code>uv pip install \"gis-mcp[climate]\"\n</code></pre> <p>Available extras:</p> <ul> <li>climate: For climate data access and processing (installs <code>cdsapi</code>)</li> <li>ecology: For ecological and biodiversity data (installs <code>pygbif</code>)</li> <li>administrative-boundaries: For working with global administrative boundaries (installs <code>pygadm</code>)</li> <li>movement: For movement and network analysis (installs <code>osmnx</code>)</li> <li>satellite-imagery: For searching and processing satellite imagery (installs <code>pystac-client</code>, <code>planetary-computer</code>, <code>xarray</code>, <code>stackstac</code>, <code>requests</code>)</li> <li>land-cover: For land cover data workflows (same as satellite-imagery)</li> <li>all: Installs all optional dependencies for full functionality</li> </ul> <p>Example to install with multiple extras:</p> <pre><code>uv pip install \"gis-mcp[climate,ecology,movement]\"\n</code></pre> <p>See the <code>pyproject.toml</code> or documentation for the full list of extras and their included packages.</p> <p>For more information on fetching external datasets (climate, ecology, movement, satellite imagery, and more), see the Data Gathering guide.</p>"},{"location":"getting-started/#next-steps","title":"Next steps","text":"<ul> <li>Explore the API Reference in the sidebar (Shapely, PyProj, GeoPandas, Rasterio, PySAL)</li> <li>Check Installations \u2192 Developers for editable installs</li> </ul>"},{"location":"api/geopandas/","title":"Overview","text":""},{"location":"api/geopandas/#geopandas-tools","title":"GeoPandas Tools","text":"<p>I/O and attribute-join helpers for vector data.</p> <ul> <li>read_file_gpd</li> <li>merge_gpd</li> <li>to_file_gpd</li> <li>append_gpd</li> </ul>"},{"location":"api/geopandas/append_gpd/","title":"append_gpd","text":""},{"location":"api/geopandas/append_gpd/#append_gpd","title":"append_gpd","text":"<p>Concatenate two shapefiles vertically and save the result.</p> <ul> <li>Tool: <code>append_gpd</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile1_path (string)</li> <li>shapefile2_path (string)</li> <li>output_path (string)</li> </ul> <p>Behavior</p> <ul> <li>Reprojects to match CRS if needed, then writes ESRI Shapefile</li> </ul> <p>Returns</p> <ul> <li>info: output_path, num_features, crs, columns; status, message</li> </ul>"},{"location":"api/geopandas/clip_vector/","title":"clip_vector","text":"<p>Clip vector geometries using another geometry file with geopandas.clip.</p> <p>Arguments:</p> <ul> <li><code>gdf_path</code> (str): Path to the input geospatial file.</li> <li><code>clip_path</code> (str): Path to the clipping geometry file.</li> <li><code>output_path</code> (str, optional): Path to save the result.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, number of features, CRS, columns, preview, and output path if saved.</li> </ul>"},{"location":"api/geopandas/dissolve_gpd/","title":"dissolve_gpd","text":"<p>Dissolve geometries in a GeoDataFrame by attribute using geopandas.dissolve.</p> <p>Arguments:</p> <ul> <li><code>gdf_path</code> (str): Path to the geospatial file.</li> <li><code>by</code> (str, optional): Column to dissolve by.</li> <li><code>output_path</code> (str, optional): Path to save the result.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, number of features, CRS, columns, preview, and output path if saved.</li> </ul>"},{"location":"api/geopandas/explode_gpd/","title":"explode_gpd","text":"<p>Split multi-part geometries into single parts using geopandas.explode.</p> <p>Arguments:</p> <ul> <li><code>gdf_path</code> (str): Path to the geospatial file.</li> <li><code>output_path</code> (str, optional): Path to save the result.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, number of features, CRS, columns, preview, and output path if saved.</li> </ul>"},{"location":"api/geopandas/merge_gpd/","title":"merge_gpd","text":""},{"location":"api/geopandas/merge_gpd/#merge_gpd","title":"merge_gpd","text":"<p>Database-style attribute merge between two shapefiles; preserves geometry from the left file.</p> <ul> <li>Tool: <code>merge_gpd</code></li> </ul> <p>Parameters</p> <ul> <li>left_shapefile_path (string)</li> <li>right_shapefile_path (string)</li> <li>output_path (string)</li> <li>how (string): 'left' | 'right' | 'outer' | 'inner'</li> <li>on (string): Column present in both files</li> <li>left_on (string)</li> <li>right_on (string)</li> <li>suffixes (array [string, string])</li> </ul> <p>Returns</p> <ul> <li>info: output_path, merge_type, num_features, crs, columns; status, message</li> </ul> <p>Notes</p> <ul> <li>Right geometry is dropped before merge for efficiency; only attributes are joined.</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"merge_gpd\",\n  \"params\": {\n    \"left_shapefile_path\": \"data/admin.shp\",\n    \"right_shapefile_path\": \"data/stats.shp\",\n    \"output_path\": \"out/merged.shp\",\n    \"how\": \"left\",\n    \"left_on\": \"GEOID\",\n    \"right_on\": \"GEOID\",\n    \"suffixes\": [\"\", \"_r\"]\n  }\n}\n</code></pre>"},{"location":"api/geopandas/overlay_gpd/","title":"overlay_gpd","text":"<p>Overlay two GeoDataFrames using various spatial operations (intersection, union, etc.).</p> <p>Arguments:</p> <ul> <li><code>gdf1_path</code> (str): Path to the first geospatial file.</li> <li><code>gdf2_path</code> (str): Path to the second geospatial file.</li> <li><code>how</code> (str, default 'intersection'): Overlay method ('intersection', 'union', 'identity', 'symmetric_difference', 'difference').</li> <li><code>output_path</code> (str, optional): Path to save the result.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, number of features, CRS, columns, preview, and output path if saved.</li> </ul>"},{"location":"api/geopandas/point_in_polygon/","title":"point_in_polygon","text":"<p>Check if points are inside polygons using a spatial join (predicate='within').</p> <p>Arguments:</p> <ul> <li><code>points_path</code> (str): Path to the point geospatial file.</li> <li><code>polygons_path</code> (str): Path to the polygon geospatial file.</li> <li><code>output_path</code> (str, optional): Path to save the result.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, number of features, CRS, columns, preview, and output path if saved.</li> </ul>"},{"location":"api/geopandas/read_file_gpd/","title":"read_file_gpd","text":""},{"location":"api/geopandas/read_file_gpd/#read_file_gpd","title":"read_file_gpd","text":"<p>Read a geospatial file into a GeoDataFrame and return metadata plus a preview.</p> <ul> <li>Tool: <code>read_file_gpd</code></li> </ul> <p>Parameters</p> <ul> <li>file_path (string): Path to vector data (e.g., .shp, .geojson)</li> </ul> <p>Returns</p> <ul> <li>columns, column_types, num_rows, num_columns, crs, bounds, preview[], status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"read_file_gpd\",\n  \"params\": {\n    \"file_path\": \"data/places.shp\"\n  }\n}\n</code></pre>"},{"location":"api/geopandas/sjoin_gpd/","title":"sjoin_gpd","text":"<p>Perform a spatial join between two GeoDataFrames using geopandas.sjoin.</p> <p>Arguments:</p> <ul> <li><code>left_path</code> (str): Path to the left geospatial file.</li> <li><code>right_path</code> (str): Path to the right geospatial file.</li> <li><code>how</code> (str, default 'inner'): Type of join ('left', 'right', 'inner').</li> <li><code>predicate</code> (str, default 'intersects'): Spatial predicate ('intersects', 'within', 'contains', etc.).</li> <li><code>output_path</code> (str, optional): Path to save the result.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, number of features, CRS, columns, preview, and output path if saved.</li> </ul>"},{"location":"api/geopandas/sjoin_nearest_gpd/","title":"sjoin_nearest_gpd","text":"<p>Perform a nearest neighbor spatial join using geopandas.sjoin_nearest.</p> <p>Arguments:</p> <ul> <li><code>left_path</code> (str): Path to the left geospatial file.</li> <li><code>right_path</code> (str): Path to the right geospatial file.</li> <li><code>how</code> (str, default 'left'): Type of join ('left', 'right').</li> <li><code>max_distance</code> (float, optional): Maximum search distance.</li> <li><code>output_path</code> (str, optional): Path to save the result.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, number of features, CRS, columns, preview, and output path if saved.</li> </ul>"},{"location":"api/geopandas/to_file_gpd/","title":"to_file_gpd","text":""},{"location":"api/geopandas/to_file_gpd/#to_file_gpd","title":"to_file_gpd","text":"<p>Write a GeoDataFrame to a file. This server exposes write via other tools (e.g., <code>append_gpd</code>, <code>merge_gpd</code>).</p> <p>Note: Direct <code>to_file_gpd</code> write helper is not separately exposed; use read/merge/append patterns shown.</p> <p>Related</p> <ul> <li>append_gpd (vertical concat helper)</li> <li>merge_gpd (attribute join)</li> </ul>"},{"location":"api/geopandas/write_file_gpd/","title":"write_file_gpd","text":"<p>Export a GeoDataFrame to a file (Shapefile, GeoJSON, GPKG, etc.).</p> <p>Arguments:</p> <ul> <li><code>gdf_path</code> (str): Path to the input geospatial file.</li> <li><code>output_path</code> (str): Path to save the exported file.</li> <li><code>driver</code> (str, optional): OGR driver name (e.g., 'ESRI Shapefile', 'GeoJSON', 'GPKG').</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, output path, CRS, number of features, and columns.</li> </ul>"},{"location":"api/pyproj/","title":"Overview","text":""},{"location":"api/pyproj/#pyproj-tools","title":"PyProj Tools","text":"<p>Coordinate reference system utilities and geodetic calculations.</p> <ul> <li>transform_coordinates</li> <li>project_geometry</li> <li>get_crs_info</li> <li>get_available_crs</li> <li>get_utm_zone</li> <li>get_utm_crs</li> <li>get_geocentric_crs</li> <li>get_geod_info</li> <li>calculate_geodetic_distance</li> <li>calculate_geodetic_point</li> <li>calculate_geodetic_area</li> </ul>"},{"location":"api/pyproj/calculate_geodetic_area/","title":"calculate_geodetic_area","text":""},{"location":"api/pyproj/calculate_geodetic_area/#calculate_geodetic_area","title":"calculate_geodetic_area","text":"<p>Compute the geodesic area of a polygon.</p> <ul> <li>Tool: <code>calculate_geodetic_area</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT polygon)</li> <li>ellps (string, default \"WGS84\")</li> </ul> <p>Returns</p> <ul> <li>area (number), ellps; status, message</li> </ul>"},{"location":"api/pyproj/calculate_geodetic_distance/","title":"calculate_geodetic_distance","text":""},{"location":"api/pyproj/calculate_geodetic_distance/#calculate_geodetic_distance","title":"calculate_geodetic_distance","text":"<p>Compute geodesic distance and azimuths between two lon/lat points.</p> <ul> <li>Tool: <code>calculate_geodetic_distance</code></li> </ul> <p>Parameters</p> <ul> <li>point1 (array [lon, lat])</li> <li>point2 (array [lon, lat])</li> <li>ellps (string, default \"WGS84\")</li> </ul> <p>Returns</p> <ul> <li>distance (number, meters), forward_azimuth, back_azimuth; status, message</li> </ul>"},{"location":"api/pyproj/calculate_geodetic_point/","title":"calculate_geodetic_point","text":""},{"location":"api/pyproj/calculate_geodetic_point/#calculate_geodetic_point","title":"calculate_geodetic_point","text":"<p>From a start lon/lat, azimuth, and distance, compute the destination point.</p> <ul> <li>Tool: <code>calculate_geodetic_point</code></li> </ul> <p>Parameters</p> <ul> <li>start_point (array [lon, lat])</li> <li>azimuth (number, degrees)</li> <li>distance (number, meters)</li> <li>ellps (string, default \"WGS84\")</li> </ul> <p>Returns</p> <ul> <li>point [lon, lat], back_azimuth, ellps; status, message</li> </ul>"},{"location":"api/pyproj/get_available_crs/","title":"get_available_crs","text":""},{"location":"api/pyproj/get_available_crs/#get_available_crs","title":"get_available_crs","text":"<p>Return a list of available CRS entries.</p> <ul> <li>Tool: <code>get_available_crs</code></li> </ul> <p>Returns</p> <ul> <li>crs_list[] with auth_name, code, name, type; status, message</li> </ul>"},{"location":"api/pyproj/get_crs_info/","title":"get_crs_info","text":""},{"location":"api/pyproj/get_crs_info/#get_crs_info","title":"get_crs_info","text":"<p>Return detailed information about a CRS string.</p> <ul> <li>Tool: <code>get_crs_info</code></li> </ul> <p>Parameters</p> <ul> <li>crs (string): e.g., \"EPSG:4326\" or WKT</li> </ul> <p>Returns</p> <ul> <li>name, type, axis_info, is_geographic, is_projected,   datum, ellipsoid, prime_meridian, area_of_use,   status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"get_crs_info\",\n  \"params\": {\n    \"crs\": \"EPSG:4326\"\n  }\n}\n</code></pre>"},{"location":"api/pyproj/get_geocentric_crs/","title":"get_geocentric_crs","text":""},{"location":"api/pyproj/get_geocentric_crs/#get_geocentric_crs","title":"get_geocentric_crs","text":"<p>Return a geocentric CRS (WKT) for given lon/lat.</p> <ul> <li>Tool: <code>get_geocentric_crs</code></li> </ul> <p>Parameters</p> <ul> <li>coordinates (array [lon, lat])</li> </ul> <p>Returns</p> <ul> <li>crs (string, WKT), status, message</li> </ul>"},{"location":"api/pyproj/get_geod_info/","title":"get_geod_info","text":""},{"location":"api/pyproj/get_geod_info/#get_geod_info","title":"get_geod_info","text":"<p>Return parameters of a Geod model.</p> <ul> <li>Tool: <code>get_geod_info</code></li> </ul> <p>Parameters</p> <ul> <li>ellps (string, default \"WGS84\")</li> <li>a (number, optional), b (number, optional), f (number, optional)</li> </ul> <p>Returns</p> <ul> <li>ellps, a, b, f, es, e; status, message</li> </ul>"},{"location":"api/pyproj/get_utm_crs/","title":"get_utm_crs","text":""},{"location":"api/pyproj/get_utm_crs/#get_utm_crs","title":"get_utm_crs","text":"<p>Return a UTM CRS (WKT) for given lon/lat.</p> <ul> <li>Tool: <code>get_utm_crs</code></li> </ul> <p>Parameters</p> <ul> <li>coordinates (array [lon, lat])</li> </ul> <p>Returns</p> <ul> <li>crs (string, WKT), status, message</li> </ul>"},{"location":"api/pyproj/get_utm_zone/","title":"get_utm_zone","text":""},{"location":"api/pyproj/get_utm_zone/#get_utm_zone","title":"get_utm_zone","text":"<p>Return the UTM zone code for given lon/lat.</p> <ul> <li>Tool: <code>get_utm_zone</code></li> </ul> <p>Parameters</p> <ul> <li>coordinates (array [lon, lat])</li> </ul> <p>Returns</p> <ul> <li>zone (string), status, message</li> </ul>"},{"location":"api/pyproj/project_geometry/","title":"project_geometry","text":""},{"location":"api/pyproj/project_geometry/#project_geometry","title":"project_geometry","text":"<p>Project a geometry from one CRS to another.</p> <ul> <li>Tool: <code>project_geometry</code></li> <li>Geometry format: WKT</li> </ul> <p>Parameters</p> <ul> <li>geometry (string)</li> <li>source_crs (string)</li> <li>target_crs (string)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT)</li> <li>source_crs, target_crs, status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"project_geometry\",\n  \"params\": {\n    \"geometry\": \"POINT(12.3 45.6)\",\n    \"source_crs\": \"EPSG:4326\",\n    \"target_crs\": \"EPSG:3857\"\n  }\n}\n</code></pre>"},{"location":"api/pyproj/transform_coordinates/","title":"transform_coordinates","text":""},{"location":"api/pyproj/transform_coordinates/#transform_coordinates","title":"transform_coordinates","text":"<p>Transform a coordinate pair between CRS.</p> <ul> <li>Tool: <code>transform_coordinates</code></li> </ul> <p>Parameters</p> <ul> <li>coordinates (array [x, y])</li> <li>source_crs (string, e.g., \"EPSG:4326\")</li> <li>target_crs (string, e.g., \"EPSG:3857\")</li> </ul> <p>Returns</p> <ul> <li>coordinates (array [x, y])</li> <li>source_crs, target_crs, status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"transform_coordinates\",\n  \"params\": {\n    \"coordinates\": [0, 0],\n    \"source_crs\": \"EPSG:4326\",\n    \"target_crs\": \"EPSG:3857\"\n  }\n}\n</code></pre>"},{"location":"api/pysal/","title":"Overview","text":""},{"location":"api/pysal/#pysal-esda-tools","title":"PySAL (ESDA) Tools","text":"<p>Spatial autocorrelation and clustering tools powered by PySAL/ESDA.</p> <ul> <li>morans_i</li> <li>gearys_c</li> <li>getis_ord_g</li> <li>moran_local</li> <li>gamma_statistic</li> <li>getis_ord_g_local</li> <li>join_counts</li> <li>join_counts_local</li> <li>adbscan</li> </ul>"},{"location":"api/pysal/adbscan/","title":"adbscan","text":""},{"location":"api/pysal/adbscan/#adbscan","title":"adbscan","text":"<p>Adaptive DBSCAN clustering on point coordinates.</p> <ul> <li>Tool: <code>adbscan</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (null/ignored)</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number)</li> <li>eps (number, default 0.1)</li> <li>min_samples (integer, default 5)</li> </ul> <p>Returns</p> <ul> <li>labels[], core_sample_indices[], components (optional), data_preview[]; status, message</li> </ul>"},{"location":"api/pysal/build_and_transform_weights/","title":"Build and transform weights","text":""},{"location":"api/pysal/build_and_transform_weights/#build_and_transform_weights","title":"build_and_transform_weights","text":"<p>Build and transform spatial weights in one step.</p> <ul> <li>Tool: <code>build_and_transform_weights</code></li> </ul> <p>Parameters</p> <ul> <li>data_path (string): Path to shapefile or GeoPackage.</li> <li>method (string, default \"queen\"): 'queen', 'rook', 'distance_band', or 'knn'.</li> <li>id_field (string, optional): Field name for IDs.</li> <li>threshold (float, required if method=\"distance_band\"): Distance threshold.</li> <li>k (integer, required if method=\"knn\"): Number of nearest neighbors.</li> <li>binary (bool, default True): Binary or inverse-distance weights (DistanceBand only).</li> <li>transform_type (string, default \"r\"): 'r', 'v', 'b', 'o', or 'd'.</li> </ul> <p>Returns</p> <ul> <li>n (integer): Number of observations.</li> <li>id_count (integer): Number of IDs.</li> <li>method (string): Method used.</li> <li>threshold (float): Distance threshold (if applicable).</li> <li>k (integer): Number of neighbors (if applicable).</li> <li>binary (bool): Binary option (if applicable).</li> <li>transform (string): Transformation applied.</li> <li>neighbors_stats (dict): Min, max, mean number of neighbors.</li> <li>islands (list): List of isolated units.</li> <li>neighbors_preview (dict): Preview of neighbors for first 5 IDs.</li> <li>weights_preview (dict): Preview of weights for first 5 IDs.</li> <li>status, message</li> </ul>"},{"location":"api/pysal/build_transform_and_save_weights/","title":"build_and_transform_weights","text":""},{"location":"api/pysal/build_transform_and_save_weights/#build_transform_and_save_weights","title":"build_transform_and_save_weights","text":"<p>Pipeline: Build spatial weights, optionally transform, and save to file.</p> <ul> <li>Tool: <code>build_transform_and_save_weights</code></li> </ul> <p>Parameters</p> <ul> <li>data_path (string): Path to shapefile or GeoPackage.</li> <li>method (string, default \"queen\"): 'queen', 'rook', 'distance_band', or 'knn'.</li> <li>id_field (string, optional): Field name for IDs.</li> <li>threshold (float, required if method=\"distance_band\"): Distance threshold.</li> <li>k (integer, required if method=\"knn\"): Number of neighbors.</li> <li>binary (bool, default True): Binary or inverse-distance weights (DistanceBand only).</li> <li>transform_type (string, optional): 'r', 'v', 'b', 'o', or 'd'.</li> <li>output_path (string, default \"weights.gal\"): File path to save weights.</li> <li>format (string, default \"gal\"): 'gal' or 'gwt'.</li> <li>overwrite (bool, default False): Allow overwriting if file exists.</li> </ul> <p>Returns</p> <ul> <li>path (string): Output file path.</li> <li>format (string): File format.</li> <li>n (integer): Number of observations.</li> <li>transform (string): Transformation applied (if any).</li> <li>islands (list): List of isolated units.</li> <li>status, message</li> </ul>"},{"location":"api/pysal/distance_band_weights/","title":"distance_band_weights","text":""},{"location":"api/pysal/distance_band_weights/#distance_band_weights","title":"distance_band_weights","text":"<p>Create a distance-based spatial weights (W) matrix from point data.</p> <ul> <li>Tool: <code>distance_band_weights</code></li> </ul> <p>Parameters</p> <ul> <li>data_path (string): Path to point shapefile or GeoPackage.</li> <li>threshold (float): Distance threshold for neighbors (in CRS units).</li> <li>binary (bool, default True): If True, binary weights; if False, inverse-distance weights.</li> <li>id_field (string, optional): Attribute name to use as observation IDs.</li> </ul> <p>Returns</p> <ul> <li>n (integer): Number of observations.</li> <li>id_count (integer): Number of IDs in the dataset.</li> <li>threshold (float): Distance threshold used.</li> <li>binary (bool): Whether weights are binary.</li> <li>id_field (string): Field used for IDs.</li> <li>neighbors_stats (dict): Min, max, mean number of neighbors.</li> <li>islands (list): List of isolated units.</li> <li>neighbors_preview (dict): Preview of neighbors for first 5 IDs.</li> <li>weights_preview (dict): Preview of weights for first 5 IDs.</li> <li>status, message</li> </ul>"},{"location":"api/pysal/gamma_statistic/","title":"gamma_statistic","text":""},{"location":"api/pysal/gamma_statistic/#gamma_statistic","title":"gamma_statistic","text":"<p>Compute Gamma statistic for spatial autocorrelation.</p> <ul> <li>Tool: <code>gamma_statistic</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (string, default \"LAND_USE\")</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number)</li> </ul> <p>Returns</p> <ul> <li>Gamma (number), p_value (if available), data_preview[]; status, message</li> </ul>"},{"location":"api/pysal/gearys_c/","title":"gearys_c","text":""},{"location":"api/pysal/gearys_c/#gearys_c","title":"gearys_c","text":"<p>Compute Geary's C global autocorrelation statistic.</p> <ul> <li>Tool: <code>gearys_c</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (string, default \"LAND_USE\")</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number)</li> </ul> <p>Returns</p> <ul> <li>C, p_value, z_score, data_preview[], status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"gearys_c\",\n  \"params\": {\n    \"shapefile_path\": \"data/regions.shp\",\n    \"dependent_var\": \"POP_DENS\",\n    \"target_crs\": \"EPSG:3857\",\n    \"distance_threshold\": 50000\n  }\n}\n</code></pre>"},{"location":"api/pysal/getis_ord_g/","title":"getis_ord_g","text":""},{"location":"api/pysal/getis_ord_g/#getis_ord_g","title":"getis_ord_g","text":"<p>Compute Global Getis-Ord G statistic for hot spot analysis.</p> <ul> <li>Tool: <code>getis_ord_g</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (string, default \"LAND_USE\")</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number)</li> </ul> <p>Returns</p> <ul> <li>G, p_value, z_score, data_preview[], status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"getis_ord_g\",\n  \"params\": {\n    \"shapefile_path\": \"data/regions.shp\",\n    \"dependent_var\": \"POP_DENS\",\n    \"target_crs\": \"EPSG:3857\",\n    \"distance_threshold\": 50000\n  }\n}\n</code></pre>"},{"location":"api/pysal/getis_ord_g_local/","title":"getis_ord_g_local","text":""},{"location":"api/pysal/getis_ord_g_local/#getis_ord_g_local","title":"getis_ord_g_local","text":"<p>Compute Local Getis-Ord G* statistic.</p> <ul> <li>Tool: <code>getis_ord_g_local</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (string, default \"LAND_USE\")</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number)</li> </ul> <p>Returns</p> <ul> <li>G_local[], p_values[], z_scores[], data_preview[]; status, message</li> </ul>"},{"location":"api/pysal/join_counts/","title":"join_counts","text":""},{"location":"api/pysal/join_counts/#join_counts","title":"join_counts","text":"<p>Compute Global Binary Join Counts on a binary variable.</p> <ul> <li>Tool: <code>join_counts</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (string, default \"LAND_USE\")</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number)</li> </ul> <p>Returns</p> <ul> <li>join_counts, expected, variance, z_score, p_value, data_preview[]; status, message</li> </ul>"},{"location":"api/pysal/join_counts_local/","title":"join_counts_local","text":""},{"location":"api/pysal/join_counts_local/#join_counts_local","title":"join_counts_local","text":"<p>Compute Local Join Counts statistics.</p> <ul> <li>Tool: <code>join_counts_local</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (string, default \"LAND_USE\")</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number)</li> </ul> <p>Returns</p> <ul> <li>local_join_counts[]; data_preview[]; status, message</li> </ul>"},{"location":"api/pysal/knn_weights/","title":"knn_weights","text":""},{"location":"api/pysal/knn_weights/#knn_weights","title":"knn_weights","text":"<p>Create a k-nearest neighbors spatial weights (W) matrix from point data.</p> <ul> <li>Tool: <code>knn_weights</code></li> </ul> <p>Parameters</p> <ul> <li>data_path (string): Path to point shapefile or GeoPackage.</li> <li>k (integer): Number of nearest neighbors.</li> <li>id_field (string, optional): Attribute name to use as observation IDs.</li> </ul> <p>Returns</p> <ul> <li>n (integer): Number of observations.</li> <li>id_count (integer): Number of IDs in the dataset.</li> <li>k (integer): Number of neighbors used.</li> <li>id_field (string): Field used for IDs.</li> <li>neighbors_stats (dict): Min, max, mean number of neighbors.</li> <li>islands (list): List of isolated units.</li> <li>neighbors_preview (dict): Preview of neighbors for first 5 IDs.</li> <li>weights_preview (dict): Preview of weights for first 5 IDs.</li> <li>status, message</li> </ul>"},{"location":"api/pysal/moran_local/","title":"moran_local","text":""},{"location":"api/pysal/moran_local/#moran_local","title":"moran_local","text":"<p>Compute Local Moran's I statistics.</p> <ul> <li>Tool: <code>moran_local</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (string, default \"LAND_USE\")</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number)</li> </ul> <p>Returns</p> <ul> <li>arrays: Is[], p_values[], z_scores[], data_preview[], status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"moran_local\",\n  \"params\": {\n    \"shapefile_path\": \"data/regions.shp\",\n    \"dependent_var\": \"POP_DENS\",\n    \"target_crs\": \"EPSG:3857\",\n    \"distance_threshold\": 50000\n  }\n}\n</code></pre>"},{"location":"api/pysal/morans_i/","title":"morans_i","text":""},{"location":"api/pysal/morans_i/#morans_i","title":"morans_i","text":"<p>Compute Moran's I global autocorrelation statistic.</p> <ul> <li>Tool: <code>morans_i</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string)</li> <li>dependent_var (string, default \"LAND_USE\")</li> <li>target_crs (string, default \"EPSG:4326\")</li> <li>distance_threshold (number, meters if projected; degrees if EPSG:4326)</li> </ul> <p>Returns</p> <ul> <li>I, p_value, z_score, data_preview[], status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"morans_i\",\n  \"params\": {\n    \"shapefile_path\": \"data/regions.shp\",\n    \"dependent_var\": \"POP_DENS\",\n    \"target_crs\": \"EPSG:3857\",\n    \"distance_threshold\": 50000\n  }\n}\n</code></pre>"},{"location":"api/pysal/ols_with_spatial_diagnostics_safe/","title":"ols_with_spatial_diagnostics_safe","text":""},{"location":"api/pysal/ols_with_spatial_diagnostics_safe/#ols_with_spatial_diagnostics_safe","title":"ols_with_spatial_diagnostics_safe","text":"<p>Run OLS regression with spatial diagnostics, ensuring data safety checks.</p> <ul> <li>Tool: <code>ols_with_spatial_diagnostics_safe</code></li> </ul> <p>Parameters</p> <ul> <li>data_path (string): Path to shapefile or GeoPackage.</li> <li>y_field (string): Dependent variable column name.</li> <li>x_fields (list of strings): Independent variable column names.</li> <li>weights_path (string, optional): Path to weights file (.gal or .gwt).</li> <li>weights_method (string, default \"queen\"): 'queen', 'rook', 'distance_band', or 'knn'.</li> <li>id_field (string, optional): Attribute name for IDs.</li> <li>threshold (float, required if method=\"distance_band\"): Distance threshold.</li> <li>k (integer, required if method=\"knn\"): Number of neighbors.</li> <li>binary (bool, default True): Binary option (DistanceBand only).</li> </ul> <p>Returns</p> <ul> <li>n_obs (integer): Number of observations.</li> <li>r2 (float): R-squared value.</li> <li>std_error (list): Standard errors for coefficients.</li> <li>betas (dict): Estimated coefficients.</li> <li>moran_residual (float): Moran\u2019s I of residuals (if available).</li> <li>moran_pvalue (float): P-value of Moran\u2019s I test (if available).</li> <li>status, message</li> </ul>"},{"location":"api/pysal/weights_from_shapefile/","title":"weights_from_shapefile","text":""},{"location":"api/pysal/weights_from_shapefile/#weights_from_shapefile","title":"weights_from_shapefile","text":"<p>Create a spatial weights (W) matrix from a shapefile using contiguity.</p> <ul> <li>Tool: <code>weights_from_shapefile</code></li> </ul> <p>Parameters</p> <ul> <li>shapefile_path (string): Path to the shapefile.</li> <li>contiguity (string, default \"queen\"): Type of contiguity (\"queen\" or \"rook\").</li> <li>id_field (string, optional): Attribute name to use as observation IDs.</li> </ul> <p>Returns</p> <ul> <li>n (integer): Number of observations.</li> <li>id_count (integer): Number of IDs in the dataset.</li> <li>id_field (string): Field used for IDs.</li> <li>contiguity (string): \"queen\", \"rook\", or \"generic\".</li> <li>neighbors_stats (dict): Min, max, mean number of neighbors.</li> <li>islands (list): List of isolated units (if any).</li> <li>neighbors_preview (dict): Preview of neighbors for first 5 IDs.</li> <li>weights_preview (dict): Preview of weights for first 5 IDs.</li> <li>status, message</li> </ul>"},{"location":"api/rasterio/","title":"Overview","text":""},{"location":"api/rasterio/#rasterio-tools","title":"Rasterio Tools","text":"<p>Raster I/O, processing, and analysis.</p> <p>Core pages:</p> <ul> <li>compute_ndvi</li> <li>clip_raster_with_shapefile</li> <li>reproject_raster</li> </ul> <p>More tools:</p> <ul> <li>metadata_raster</li> <li>get_raster_crs</li> <li>extract_band</li> <li>raster_band_statistics</li> <li>raster_histogram</li> <li>resample_raster</li> <li>tile_raster</li> <li>raster_algebra</li> <li>concat_bands</li> <li>weighted_band_sum</li> </ul>"},{"location":"api/rasterio/clip_raster_with_shapefile/","title":"clip_raster_with_shapefile","text":""},{"location":"api/rasterio/clip_raster_with_shapefile/#clip_raster_with_shapefile","title":"clip_raster_with_shapefile","text":"<p>Clip a raster using polygons from a shapefile and write the result.</p> <ul> <li>Tool: <code>clip_raster_with_shapefile</code></li> </ul> <p>Parameters</p> <ul> <li>raster_path_or_url (string)</li> <li>shapefile_path (string)</li> <li>destination (string)</li> </ul> <p>Behavior</p> <ul> <li>Reprojects shapes to raster CRS if needed</li> <li>Crops to shapes; writes masked raster</li> </ul> <p>Returns</p> <ul> <li>destination, status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"clip_raster_with_shapefile\",\n  \"params\": {\n    \"raster_path_or_url\": \"data/imagery.tif\",\n    \"shapefile_path\": \"data/area.shp\",\n    \"destination\": \"out/clipped.tif\"\n  }\n}\n</code></pre>"},{"location":"api/rasterio/compute_ndvi/","title":"compute_ndvi","text":""},{"location":"api/rasterio/compute_ndvi/#compute_ndvi","title":"compute_ndvi","text":"<p>Compute NDVI from NIR and Red bands and save to GeoTIFF.</p> <ul> <li>Tool: <code>compute_ndvi</code></li> </ul> <p>Parameters</p> <ul> <li>source (string): Input raster path/URL</li> <li>red_band_index (integer)</li> <li>nir_band_index (integer)</li> <li>destination (string): Output NDVI path</li> </ul> <p>Returns</p> <ul> <li>destination, status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"compute_ndvi\",\n  \"params\": {\n    \"source\": \"data/multiband.tif\",\n    \"red_band_index\": 3,\n    \"nir_band_index\": 4,\n    \"destination\": \"out/ndvi.tif\"\n  }\n}\n</code></pre>"},{"location":"api/rasterio/concat_bands/","title":"concat_bands","text":""},{"location":"api/rasterio/concat_bands/#concat_bands","title":"concat_bands","text":"<p>Concatenate multiple single-band rasters into a multi-band raster; auto-aligns if needed.</p> <ul> <li>Tool: <code>concat_bands</code></li> </ul> <p>Parameters</p> <ul> <li>folder_path (string)</li> <li>destination (string)</li> </ul> <p>Returns</p> <ul> <li>destination; status, message</li> </ul>"},{"location":"api/rasterio/extract_band/","title":"extract_band","text":""},{"location":"api/rasterio/extract_band/#extract_band","title":"extract_band","text":"<p>Extract a single band from a multi-band raster and write it.</p> <ul> <li>Tool: <code>extract_band</code></li> </ul> <p>Parameters</p> <ul> <li>source (string)</li> <li>band_index (integer, 1-based)</li> <li>destination (string)</li> </ul> <p>Returns</p> <ul> <li>destination; status, message</li> </ul>"},{"location":"api/rasterio/focal_statistics/","title":"focal_statistics","text":"<p>Compute focal (moving window) statistics on a raster.</p> <p>Arguments:</p> <ul> <li><code>raster_path</code> (str): Path to the input raster.</li> <li><code>statistic</code> (str): Statistic to compute ('mean', 'min', 'max', 'std').</li> <li><code>size</code> (int, default 3): Window size (odd integer).</li> <li><code>output_path</code> (str, optional): Path to save the result.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and output path if saved.</li> </ul>"},{"location":"api/rasterio/get_raster_crs/","title":"get_raster_crs","text":""},{"location":"api/rasterio/get_raster_crs/#get_raster_crs","title":"get_raster_crs","text":"<p>Retrieve the CRS of a raster in PROJ dict and WKT string.</p> <ul> <li>Tool: <code>get_raster_crs</code></li> </ul> <p>Parameters</p> <ul> <li>path_or_url (string)</li> </ul> <p>Returns</p> <ul> <li>proj4 (object), wkt (string); status, message</li> </ul>"},{"location":"api/rasterio/hillshade/","title":"hillshade","text":"<p>Generate hillshade from a DEM raster.</p> <p>Arguments:</p> <ul> <li><code>raster_path</code> (str): Path to the DEM raster.</li> <li><code>azimuth</code> (float, default 315): Sun azimuth angle in degrees.</li> <li><code>angle_altitude</code> (float, default 45): Sun altitude angle in degrees.</li> <li><code>output_path</code> (str, optional): Path to save the hillshade raster.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and output path if saved.</li> </ul>"},{"location":"api/rasterio/metadata_raster/","title":"metadata_raster","text":""},{"location":"api/rasterio/metadata_raster/#metadata_raster","title":"metadata_raster","text":"<p>Open a raster (local path or HTTPS URL) and return core metadata.</p> <ul> <li>Tool: <code>metadata_raster</code></li> </ul> <p>Parameters</p> <ul> <li>path_or_url (string)</li> </ul> <p>Returns</p> <ul> <li>metadata object including name, mode, driver, width, height, count, bounds, band_dtypes, no_data, crs, transform; status, message</li> </ul>"},{"location":"api/rasterio/raster_algebra/","title":"raster_algebra","text":""},{"location":"api/rasterio/raster_algebra/#raster_algebra","title":"raster_algebra","text":"<p>Perform addition or subtraction on two rasters' bands; handles alignment.</p> <ul> <li>Tool: <code>raster_algebra</code></li> </ul> <p>Parameters</p> <ul> <li>raster1 (string)</li> <li>raster2 (string)</li> <li>band_index (integer, 1-based)</li> <li>operation (string: \"add\" | \"subtract\")</li> <li>destination (string)</li> </ul> <p>Returns</p> <ul> <li>destination; status, message</li> </ul>"},{"location":"api/rasterio/raster_band_statistics/","title":"raster_band_statistics","text":""},{"location":"api/rasterio/raster_band_statistics/#raster_band_statistics","title":"raster_band_statistics","text":"<p>Calculate min, max, mean, std for each band.</p> <ul> <li>Tool: <code>raster_band_statistics</code></li> </ul> <p>Parameters</p> <ul> <li>source (string)</li> </ul> <p>Returns</p> <ul> <li>statistics object keyed by band; status, message</li> </ul>"},{"location":"api/rasterio/raster_histogram/","title":"raster_histogram","text":""},{"location":"api/rasterio/raster_histogram/#raster_histogram","title":"raster_histogram","text":"<p>Compute histogram of pixel values for each band.</p> <ul> <li>Tool: <code>raster_histogram</code></li> </ul> <p>Parameters</p> <ul> <li>source (string)</li> <li>bins (integer, default 256)</li> </ul> <p>Returns</p> <ul> <li>histograms with histogram and bin_edges per band; status, message</li> </ul>"},{"location":"api/rasterio/reclassify_raster/","title":"reclassify_raster","text":"<p>Reclassify raster values using a mapping dictionary.</p> <p>Arguments:</p> <ul> <li><code>raster_path</code> (str): Path to the input raster.</li> <li><code>reclass_map</code> (dict): Dictionary mapping old values to new values (e.g., {1: 10, 2: 20}).</li> <li><code>output_path</code> (str): Path to save the reclassified raster.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and output path.</li> </ul>"},{"location":"api/rasterio/reproject_raster/","title":"reproject_raster","text":""},{"location":"api/rasterio/reproject_raster/#reproject_raster","title":"reproject_raster","text":"<p>Reproject a raster to a target CRS and save the result.</p> <ul> <li>Tool: <code>reproject_raster</code></li> </ul> <p>Parameters</p> <ul> <li>source (string): Input raster path/URL</li> <li>target_crs (string): e.g., \"EPSG:4326\"</li> <li>destination (string)</li> <li>resampling (string, default \"nearest\")</li> </ul> <p>Returns</p> <ul> <li>destination, status, message</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"reproject_raster\",\n  \"params\": {\n    \"source\": \"data/imagery.tif\",\n    \"target_crs\": \"EPSG:4326\",\n    \"destination\": \"out/reprojected.tif\",\n    \"resampling\": \"bilinear\"\n  }\n}\n</code></pre>"},{"location":"api/rasterio/resample_raster/","title":"resample_raster","text":""},{"location":"api/rasterio/resample_raster/#resample_raster","title":"resample_raster","text":"<p>Resample a raster by a scale factor and write the result.</p> <ul> <li>Tool: <code>resample_raster</code></li> </ul> <p>Parameters</p> <ul> <li>source (string)</li> <li>scale_factor (number)</li> <li>resampling (string)</li> <li>destination (string)</li> </ul> <p>Returns</p> <ul> <li>destination; status, message</li> </ul>"},{"location":"api/rasterio/tile_raster/","title":"tile_raster","text":""},{"location":"api/rasterio/tile_raster/#tile_raster","title":"tile_raster","text":"<p>Split a raster into square tiles and write them to a directory.</p> <ul> <li>Tool: <code>tile_raster</code></li> </ul> <p>Parameters</p> <ul> <li>source (string)</li> <li>tile_size (integer)</li> <li>destination_dir (string)</li> </ul> <p>Returns</p> <ul> <li>tiles_created (integer); status, message</li> </ul>"},{"location":"api/rasterio/weighted_band_sum/","title":"weighted_band_sum","text":""},{"location":"api/rasterio/weighted_band_sum/#weighted_band_sum","title":"weighted_band_sum","text":"<p>Compute a weighted sum across all bands in a raster.</p> <ul> <li>Tool: <code>weighted_band_sum</code></li> </ul> <p>Parameters</p> <ul> <li>source (string)</li> <li>weights (array of numbers summing to 1)</li> <li>destination (string)</li> </ul> <p>Returns</p> <ul> <li>destination; status, message</li> </ul>"},{"location":"api/rasterio/write_raster/","title":"write_raster","text":"<p>Write a numpy array to a raster file using metadata from a reference raster.</p> <p>Arguments:</p> <ul> <li><code>array</code> (list): 2D or 3D list (or numpy array) of raster values.</li> <li><code>reference_raster</code> (str): Path to a raster whose metadata will be copied.</li> <li><code>output_path</code> (str): Path to save the new raster.</li> <li><code>dtype</code> (str, optional): Data type (e.g., 'float32', 'uint8').</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and output path.</li> </ul>"},{"location":"api/rasterio/zonal_statistics/","title":"zonal_statistics","text":"<p>Calculate statistics of raster values within polygons (zonal statistics).</p> <p>Arguments:</p> <ul> <li><code>raster_path</code> (str): Path to the raster file.</li> <li><code>vector_path</code> (str): Path to the vector file (polygons).</li> <li><code>stats</code> (list, optional): List of statistics to compute (e.g., [\"mean\", \"min\", \"max\", \"std\"]).</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and statistics per polygon.</li> </ul>"},{"location":"api/shapely/","title":"Overview","text":""},{"location":"api/shapely/#shapely-tools","title":"Shapely Tools","text":"<p>High-level geometric operations exposed via MCP. All tools accept and return geometries as WKT strings.</p> <ul> <li>buffer</li> <li>intersection</li> <li>union</li> <li>difference</li> <li>centroid (tool: <code>get_centroid</code>)</li> <li>symmetric_difference</li> <li>convex_hull</li> <li>envelope</li> <li>minimum_rotated_rectangle</li> <li>get_bounds</li> <li>get_coordinates</li> <li>get_geometry_type</li> <li>rotate_geometry</li> <li>scale_geometry</li> <li>translate_geometry</li> <li>triangulate_geometry</li> <li>voronoi</li> <li>unary_union_geometries</li> <li>get_length</li> <li>get_area</li> <li>is_valid</li> <li>make_valid</li> <li>simplify</li> </ul>"},{"location":"api/shapely/buffer/","title":"buffer","text":""},{"location":"api/shapely/buffer/#buffer","title":"buffer","text":"<p>Create a buffer around a geometry.</p> <ul> <li>Tool: <code>buffer</code></li> <li>Geometry format: WKT</li> </ul> <p>Parameters</p> <ul> <li>geometry (string): Input WKT geometry</li> <li>distance (number): Buffer distance</li> <li>resolution (integer, default 16): Quadrant segments</li> <li>join_style (integer, default 1): 1=round, 2=mitre, 3=bevel</li> <li>mitre_limit (number, default 5.0)</li> <li>single_sided (boolean, default false)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT)</li> <li>status (string), message (string)</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"buffer\",\n  \"params\": {\n    \"geometry\": \"POINT(0 0)\",\n    \"distance\": 10,\n    \"resolution\": 16,\n    \"join_style\": 1,\n    \"mitre_limit\": 5.0,\n    \"single_sided\": false\n  }\n}\n</code></pre>"},{"location":"api/shapely/centroid/","title":"centroid","text":""},{"location":"api/shapely/centroid/#get_centroid","title":"get_centroid","text":"<p>Return the centroid point of a geometry.</p> <ul> <li>Tool: <code>get_centroid</code></li> <li>Geometry format: WKT</li> </ul> <p>Parameters</p> <ul> <li>geometry (string)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT point)</li> <li>status (string), message (string)</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"get_centroid\",\n  \"params\": {\n    \"geometry\": \"POLYGON((0 0,10 0,10 10,0 10,0 0))\"\n  }\n}\n</code></pre>"},{"location":"api/shapely/convex_hull/","title":"convex_hull","text":""},{"location":"api/shapely/convex_hull/#convex_hull","title":"convex_hull","text":"<p>Compute the convex hull of a geometry.</p> <ul> <li>Tool: <code>convex_hull</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/difference/","title":"difference","text":""},{"location":"api/shapely/difference/#difference","title":"difference","text":"<p>Subtract one geometry from another (geometry1 \u2212 geometry2).</p> <ul> <li>Tool: <code>difference</code></li> <li>Geometry format: WKT</li> </ul> <p>Parameters</p> <ul> <li>geometry1 (string)</li> <li>geometry2 (string)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT)</li> <li>status (string), message (string)</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"difference\",\n  \"params\": {\n    \"geometry1\": \"POLYGON((0 0,10 0,10 10,0 10,0 0))\",\n    \"geometry2\": \"POLYGON((5 5,15 5,15 15,5 15,5 5))\"\n  }\n}\n</code></pre>"},{"location":"api/shapely/envelope/","title":"envelope","text":""},{"location":"api/shapely/envelope/#envelope","title":"envelope","text":"<p>Return the axis-aligned bounding box polygon of a geometry.</p> <ul> <li>Tool: <code>envelope</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/geojson_to_geometry/","title":"geojson_to_geometry","text":"<p>Convert GeoJSON to a Shapely geometry using shapely.shape.</p> <p>Arguments:</p> <ul> <li><code>geojson</code> (dict): GeoJSON dictionary.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and geometry as WKT.</li> </ul>"},{"location":"api/shapely/geometry_to_geojson/","title":"geometry_to_geojson","text":"<p>Convert a Shapely geometry (WKT) to GeoJSON using shapely.geometry.mapping.</p> <p>Arguments:</p> <ul> <li><code>geometry</code> (str): WKT string of the geometry.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and GeoJSON representation.</li> </ul>"},{"location":"api/shapely/get_area/","title":"get_area","text":""},{"location":"api/shapely/get_area/#get_area","title":"get_area","text":"<p>Return the area of a geometry.</p> <ul> <li>Tool: <code>get_area</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>area (number), status, message</li> </ul>"},{"location":"api/shapely/get_bounds/","title":"get_bounds","text":""},{"location":"api/shapely/get_bounds/#get_bounds","title":"get_bounds","text":"<p>Return bounds [minx, miny, maxx, maxy] of a geometry.</p> <ul> <li>Tool: <code>get_bounds</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>bounds (array [minx, miny, maxx, maxy]), status, message</li> </ul>"},{"location":"api/shapely/get_coordinates/","title":"get_coordinates","text":""},{"location":"api/shapely/get_coordinates/#get_coordinates","title":"get_coordinates","text":"<p>Return coordinates of a LineString or LinearRing.</p> <ul> <li>Tool: <code>get_coordinates</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>coordinates (array of [x, y]), status, message</li> </ul>"},{"location":"api/shapely/get_geometry_type/","title":"get_geometry_type","text":""},{"location":"api/shapely/get_geometry_type/#get_geometry_type","title":"get_geometry_type","text":"<p>Return the geometry type string.</p> <ul> <li>Tool: <code>get_geometry_type</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>type (string), status, message</li> </ul>"},{"location":"api/shapely/get_length/","title":"get_length","text":""},{"location":"api/shapely/get_length/#get_length","title":"get_length","text":"<p>Return the length of a geometry.</p> <ul> <li>Tool: <code>get_length</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>length (number), status, message</li> </ul>"},{"location":"api/shapely/intersection/","title":"intersection","text":""},{"location":"api/shapely/intersection/#intersection","title":"intersection","text":"<p>Find the geometric intersection of two geometries.</p> <ul> <li>Tool: <code>intersection</code></li> <li>Geometry format: WKT</li> </ul> <p>Parameters</p> <ul> <li>geometry1 (string): First WKT geometry</li> <li>geometry2 (string): Second WKT geometry</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT)</li> <li>status (string), message (string)</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"intersection\",\n  \"params\": {\n    \"geometry1\": \"POLYGON((0 0,10 0,10 10,0 10,0 0))\",\n    \"geometry2\": \"POLYGON((5 5,15 5,15 15,5 15,5 5))\"\n  }\n}\n</code></pre>"},{"location":"api/shapely/is_valid/","title":"is_valid","text":""},{"location":"api/shapely/is_valid/#is_valid","title":"is_valid","text":"<p>Check if a geometry is valid.</p> <ul> <li>Tool: <code>is_valid</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>is_valid (boolean), status, message</li> </ul>"},{"location":"api/shapely/make_valid/","title":"make_valid","text":""},{"location":"api/shapely/make_valid/#make_valid","title":"make_valid","text":"<p>Make a geometry valid.</p> <ul> <li>Tool: <code>make_valid</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/minimum_rotated_rectangle/","title":"minimum_rotated_rectangle","text":""},{"location":"api/shapely/minimum_rotated_rectangle/#minimum_rotated_rectangle","title":"minimum_rotated_rectangle","text":"<p>Return the minimum rotated rectangle of a geometry.</p> <ul> <li>Tool: <code>minimum_rotated_rectangle</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/nearest_point_on_geometry/","title":"nearest_point_on_geometry","text":"<p>Find the nearest point on geometry2 to geometry1 using shapely.ops.nearest_points.</p> <p>Arguments:</p> <ul> <li><code>geometry1</code> (str): WKT string of the first geometry (e.g., a point).</li> <li><code>geometry2</code> (str): WKT string of the second geometry.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and the nearest point as WKT.</li> </ul>"},{"location":"api/shapely/normalize_geometry/","title":"normalize_geometry","text":"<p>Normalize the orientation/order of a geometry using shapely.normalize.</p> <p>Arguments:</p> <ul> <li><code>geometry</code> (str): WKT string of the geometry.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and normalized geometry as WKT.</li> </ul>"},{"location":"api/shapely/rotate_geometry/","title":"rotate_geometry","text":""},{"location":"api/shapely/rotate_geometry/#rotate_geometry","title":"rotate_geometry","text":"<p>Rotate a geometry by angle around origin.</p> <ul> <li>Tool: <code>rotate_geometry</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> <li>angle (number)</li> <li>origin (string, default \"center\")</li> <li>use_radians (boolean, default false)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/scale_geometry/","title":"scale_geometry","text":""},{"location":"api/shapely/scale_geometry/#scale_geometry","title":"scale_geometry","text":"<p>Scale a geometry by factors around origin.</p> <ul> <li>Tool: <code>scale_geometry</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> <li>xfact (number)</li> <li>yfact (number)</li> <li>origin (string, default \"center\")</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/simplify/","title":"simplify","text":""},{"location":"api/shapely/simplify/#simplify","title":"simplify","text":"<p>Simplify a geometry with a tolerance.</p> <ul> <li>Tool: <code>simplify</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> <li>tolerance (number)</li> <li>preserve_topology (boolean, default true)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/snap_geometry/","title":"snap_geometry","text":"<p>Snap one geometry to another using shapely.ops.snap.</p> <p>Arguments:</p> <ul> <li><code>geometry1</code> (str): WKT string of the geometry to be snapped.</li> <li><code>geometry2</code> (str): WKT string of the reference geometry.</li> <li><code>tolerance</code> (float): Distance tolerance for snapping.</li> </ul> <p>Returns:</p> <ul> <li>Dictionary with status, message, and snapped geometry as WKT.</li> </ul>"},{"location":"api/shapely/symmetric_difference/","title":"symmetric_difference","text":""},{"location":"api/shapely/symmetric_difference/#symmetric_difference","title":"symmetric_difference","text":"<p>Find the symmetric difference of two geometries.</p> <ul> <li>Tool: <code>symmetric_difference</code></li> </ul> <p>Parameters</p> <ul> <li>geometry1 (string, WKT)</li> <li>geometry2 (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/translate_geometry/","title":"translate_geometry","text":""},{"location":"api/shapely/translate_geometry/#translate_geometry","title":"translate_geometry","text":"<p>Translate a geometry by x/y(/z) offsets.</p> <ul> <li>Tool: <code>translate_geometry</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> <li>xoff (number)</li> <li>yoff (number)</li> <li>zoff (number, default 0.0)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/triangulate_geometry/","title":"triangulate_geometry","text":""},{"location":"api/shapely/triangulate_geometry/#triangulate_geometry","title":"triangulate_geometry","text":"<p>Triangulate a polygon geometry; returns multiple triangles.</p> <ul> <li>Tool: <code>triangulate_geometry</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT)</li> </ul> <p>Returns</p> <ul> <li>geometries (array of WKT), status, message</li> </ul>"},{"location":"api/shapely/unary_union_geometries/","title":"unary_union_geometries","text":""},{"location":"api/shapely/unary_union_geometries/#unary_union_geometries","title":"unary_union_geometries","text":"<p>Compute the unary union of multiple geometries.</p> <ul> <li>Tool: <code>unary_union_geometries</code></li> </ul> <p>Parameters</p> <ul> <li>geometries (array of strings, WKT)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"api/shapely/union/","title":"union","text":""},{"location":"api/shapely/union/#union","title":"union","text":"<p>Combine two geometries into their union.</p> <ul> <li>Tool: <code>union</code></li> <li>Geometry format: WKT</li> </ul> <p>Parameters</p> <ul> <li>geometry1 (string)</li> <li>geometry2 (string)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT)</li> <li>status (string), message (string)</li> </ul> <p>Example</p> <pre><code>{\n  \"tool\": \"union\",\n  \"params\": {\n    \"geometry1\": \"POLYGON((0 0,10 0,10 10,0 10,0 0))\",\n    \"geometry2\": \"POLYGON((5 5,15 5,15 15,5 15,5 5))\"\n  }\n}\n</code></pre>"},{"location":"api/shapely/voronoi/","title":"voronoi","text":""},{"location":"api/shapely/voronoi/#voronoi","title":"voronoi","text":"<p>Create a Voronoi diagram from input points.</p> <ul> <li>Tool: <code>voronoi</code></li> </ul> <p>Parameters</p> <ul> <li>geometry (string, WKT multipoint/lines)</li> </ul> <p>Returns</p> <ul> <li>geometry (string, WKT), status, message</li> </ul>"},{"location":"data-gathering/","title":"Overview","text":""},{"location":"data-gathering/#data-gathering","title":"Data Gathering","text":"<p>This section explains how to fetch external datasets with GIS-MCP. Currently covered:</p> <ul> <li>Administrative Boundaries (via <code>pygadm</code>)</li> <li>Climate (via <code>cdsapi</code>)</li> <li>Ecology (via <code>pygbif</code>)</li> <li>Movement (via <code>osmnx</code>)</li> <li>Satellite Imagery (via <code>pystac-client</code>)</li> <li>Land Cover (via <code>pystac-client</code>)</li> </ul> <p>Each page lists requirements, parameters, and natural-language usage examples you can paste into Claude Desktop.</p>"},{"location":"data-gathering/administrative_boundaries/","title":"Administrative Boundaries","text":""},{"location":"data-gathering/administrative_boundaries/#administrative-boundaries-gadm-via-pygadm","title":"Administrative Boundaries (GADM via <code>pygadm</code>)","text":"<p>The Administrative Boundaries tool in GIS-MCP allows you to download official boundaries (countries, provinces, counties, etc.) from the GADM dataset.</p>"},{"location":"data-gathering/administrative_boundaries/#installation","title":"Installation","text":"<p>To enable boundary downloads, install GIS-MCP with the administrative-boundaries extra:</p> <pre><code>pip install gis-mcp[administrative-boundaries]\n</code></pre>"},{"location":"data-gathering/administrative_boundaries/#parameters","title":"Parameters","text":"<ul> <li> <p>region \u2013 Name or alias of the country (e.g. <code>\"Iran\"</code>, <code>\"USA\"</code>, <code>\"UK\"</code>)</p> </li> <li> <p>level \u2013 Administrative level:  </p> </li> <li><code>0</code> \u2192 Country boundary  </li> <li><code>1</code> \u2192 First-level divisions (provinces, states)  </li> <li> <p><code>2</code> \u2192 Second-level divisions (counties, districts)  </p> </li> <li> <p>path (optional) \u2013 Custom output folder (default: package\u2019s <code>data/administrative_boundaries</code> directory)</p> </li> </ul>"},{"location":"data-gathering/administrative_boundaries/#example-usage","title":"Example Usage","text":"<p>Prompt: <pre><code>Using gis-mcp download the administrative boundaries of Iran at level 1.\n</code></pre></p>"},{"location":"data-gathering/climate/","title":"Climate","text":""},{"location":"data-gathering/climate/#climate-data-era5-via-cdsapi","title":"Climate Data (ERA5 via <code>cdsapi</code>)","text":"<p>The Climate Data tool in GIS-MCP allows you to download climate variables (e.g., temperature, precipitation, wind, humidity) from the Copernicus Climate Data Store (CDS).</p>"},{"location":"data-gathering/climate/#installation","title":"Installation","text":"<p>To enable climate data downloads, install GIS-MCP with the climate extra:</p> <pre><code>pip install gis-mcp[climate]\n</code></pre>"},{"location":"data-gathering/climate/#authentication-required","title":"Authentication (Required)","text":"<p>Before using the tool, follow these steps:</p>"},{"location":"data-gathering/climate/#1-create-a-cds-account","title":"1. Create a CDS Account","text":"<ul> <li>Create a free account at the CDS Portal.</li> </ul>"},{"location":"data-gathering/climate/#2-get-your-api-key","title":"2. Get Your API Key","text":"<ul> <li>Go to your CDS Profile </li> <li>Copy your API key.</li> </ul>"},{"location":"data-gathering/climate/#3-create-the-cdsapirc-file","title":"3. Create the <code>.cdsapirc</code> File","text":"<p>Create a file named <code>.cdsapirc</code> in your home directory:</p> <ul> <li> <p>Windows: <code>C:\\Users\\&lt;username&gt;\\.cdsapirc</code></p> </li> <li> <p>Linux/Mac: <code>/home/&lt;username&gt;/.cdsapirc</code></p> </li> </ul> <p>Add the following content (replace with your real key):</p> <pre><code>url: https://cds.climate.copernicus.eu/api\nkey: &lt;UID&gt;:&lt;API_KEY&gt;\n</code></pre>"},{"location":"data-gathering/climate/#4-accept-license-agreements","title":"4. Accept License Agreements","text":"<ul> <li>Go to the ERA5 Single Levels dataset page </li> <li>Scroll down to Terms of use </li> <li>Click Accept</li> </ul>"},{"location":"data-gathering/climate/#parameters","title":"Parameters","text":"<ul> <li> <p>variable (<code>str</code>, required)   The climate variable you want to download.   Examples: <code>\"2m_temperature\"</code>, <code>\"total_precipitation\"</code>, <code>\"surface_pressure\"</code>.  </p> </li> <li> <p>year (<code>str</code>, required)   The year of interest, e.g., <code>\"2021\"</code>.  </p> </li> <li> <p>month (<code>str</code>, required)   The month as two digits, <code>\"01\"</code> through <code>\"12\"</code>.  </p> </li> <li> <p>day (<code>str</code>, required)   The day as two digits, <code>\"01\"</code> through <code>\"31\"</code>.  </p> </li> <li> <p>time (<code>str</code>, optional, default = <code>\"12:00\"</code>)   The time of day in hours and minutes (UTC).  </p> </li> <li> <p>dataset (<code>str</code>, optional, default = <code>\"reanalysis-era5-single-levels\"</code>)   The CDS dataset name.  </p> </li> <li> <p>format (<code>str</code>, optional, default = <code>\"netcdf\"</code>)   The file format. Supported values: <code>\"netcdf\"</code>, <code>\"grib\"</code>.  </p> </li> <li> <p>path (<code>str</code>, optional)   Custom output folder. If not provided, data is saved under <code>data/climate_data/</code>.</p> </li> </ul>"},{"location":"data-gathering/climate/#example-usage","title":"Example Usage","text":"<p>Prompt: <pre><code>Using gis-mcp Download 2m temperature for 2021-01-01 at 12:00 UTC.\n</code></pre></p>"},{"location":"data-gathering/ecology/","title":"Ecology","text":""},{"location":"data-gathering/ecology/#ecology-data-currently-gbif-via-pygbif","title":"Ecology Data (Currently GBIF via <code>pygbif</code>)","text":"<p>Currently, the Ecology Data tool in GIS-MCP allows you to download species occurrence records and taxonomic information from the Global Biodiversity Information Facility (GBIF).</p>"},{"location":"data-gathering/ecology/#installation","title":"Installation","text":"<p>To enable ecology data downloads, install GIS-MCP with the ecology extra:</p> <pre><code>pip install gis-mcp[ecology]\n</code></pre>"},{"location":"data-gathering/ecology/#available-operations","title":"Available Operations","text":"<ul> <li><code>get_species_info</code> \u2013 Retrieve taxonomic information for a given species name.</li> <li><code>download_species_occurrences</code> \u2013 Download occurrence records for a given species and save as JSON.</li> </ul>"},{"location":"data-gathering/ecology/#example-usage","title":"Example Usage","text":"<p>Prompt:</p> <pre><code>Using gis-mcp download occurrence records for Panthera leo (African lion) and save as JSON.\n</code></pre> <p>Prompt:</p> <pre><code>Using gis-mcp get taxonomic information for Quercus robur (English oak).\n</code></pre>"},{"location":"data-gathering/land_cover/","title":"Land Cover","text":""},{"location":"data-gathering/land_cover/#land-cover-worldcover-ndvi-via-pystac-client","title":"Land Cover (WorldCover &amp; NDVI via <code>pystac-client</code>)","text":"<p>The Land Cover tool in GIS-MCP allows you to access global land cover maps and vegetation indices through the Microsoft Planetary Computer. It currently supports downloading ESA WorldCover layers and computing NDVI from Sentinel-2 imagery.</p>"},{"location":"data-gathering/land_cover/#installation","title":"Installation","text":"<p>To enable land products, install GIS-MCP with the land-cover extra:</p> <pre><code>pip install gis-mcp[land-cover]\n</code></pre>"},{"location":"data-gathering/land_cover/#parameters","title":"Parameters","text":""},{"location":"data-gathering/land_cover/#download_worldcover","title":"<code>download_worldcover</code>","text":"<ul> <li>year \u2013 Year of the WorldCover dataset (e.g., <code>2020</code>, <code>2021</code>, <code>2023</code>).  </li> <li>collection (optional) \u2013 STAC collection ID. (default: <code>\"esa-worldcover\"</code>) </li> <li>asset_key \u2013 Asset key to download. (default: <code>\"map\"</code>) </li> <li>bbox (optional) \u2013 Bounding box string <code>\"minx,miny,maxx,maxy\"</code> in WGS84.  </li> <li>geometry_geojson (optional) \u2013 GeoJSON geometry (string) for clipping.  </li> <li>out_crs (optional) \u2013 Output CRS (e.g., <code>\"EPSG:4326\"</code>). (default: <code>\"EPSG:4326\"</code>) </li> <li>filename (optional) \u2013 Custom filename for the GeoTIFF. (default: auto-generated) </li> <li>path (optional) \u2013 Output directory. (default: <code>./data/land_products</code> inside the package) </li> </ul>"},{"location":"data-gathering/land_cover/#compute_s2_ndvi","title":"<code>compute_s2_ndvi</code>","text":"<ul> <li>datetime \u2013 Date or date range in ISO 8601.   Examples:  </li> <li><code>\"2024-07-05\"</code> \u2192 single day  </li> <li><code>\"2024-07-01/2024-07-15\"</code> \u2192 date interval (default: <code>\"2024-07-01/2024-07-15\"</code>) </li> <li>cloud_cover_lt \u2013 Maximum cloud cover percentage.   Use <code>None</code> to disable filtering. (default: <code>20</code>) </li> <li>bbox (optional) \u2013 Bounding box string <code>\"minx,miny,maxx,maxy\"</code> in WGS84.  </li> <li>geometry_geojson (optional) \u2013 GeoJSON geometry (string) for clipping.  </li> <li>out_crs (optional) \u2013 Output CRS (e.g., <code>\"EPSG:4326\"</code>). (default: <code>\"EPSG:4326\"</code>) </li> <li>filename (optional) \u2013 Custom filename for the output GeoTIFF. (default: auto-generated) </li> <li>path (optional) \u2013 Output directory. (default: <code>./data/land_products</code> inside the package) </li> </ul>"},{"location":"data-gathering/land_cover/#example-usage","title":"Example Usage","text":"<pre><code>Using gis-mcp compute the NDVI from Sentinel-2 imagery over Iran during July 2024 with less than 20% cloud cover.\n</code></pre>"},{"location":"data-gathering/movement/","title":"Movement","text":""},{"location":"data-gathering/movement/#movement-data-via-osmnx","title":"Movement Data (via <code>osmnx</code>)","text":"<p>Currently, the Movement Data tool in GIS-MCP allows you to download and analyze street networks and perform routing using OSMnx.</p>"},{"location":"data-gathering/movement/#installation","title":"Installation","text":"<p>To enable movement data tools, install GIS-MCP with the movement extra:</p> <pre><code>pip install gis-mcp[movement]\n</code></pre>"},{"location":"data-gathering/movement/#available-operations","title":"Available Operations","text":"<ul> <li><code>download_street_network</code> \u2013 Download a street network for a given place and save as GraphML.</li> <li><code>calculate_shortest_path</code> \u2013 Calculate the shortest path between two points using a saved street network.</li> </ul>"},{"location":"data-gathering/movement/#example-usage","title":"Example Usage","text":"<p>Prompt:</p> <pre><code>download the street network for Berlin and save as Graph file. Please use gis mcp tools\n</code></pre> <p>Prompt:</p> <pre><code>Use gis-mcp. calculate the shortest path between (52.5200, 13.4050) and (52.5155, 13.3777) using the saved Berlin driving network.\n</code></pre>"},{"location":"data-gathering/satellite_imagery/","title":"Satellite Imagery","text":""},{"location":"data-gathering/satellite_imagery/#satellite-imagery-microsoft-planetary-computer-via-pystac-client","title":"Satellite Imagery (Microsoft Planetary Computer via <code>pystac-client</code>)","text":"<p>The Satellite Imagery tool in GIS-MCP enables downloading analysis-ready satellite scenes (e.g., Sentinel-2, Landsat) directly from the Microsoft Planetary Computer. It automatically selects the least-cloudy image matching your search criteria and prepares a multi-band GeoTIFF.</p>"},{"location":"data-gathering/satellite_imagery/#installation","title":"Installation","text":"<p>To enable satellite imagery downloads, install GIS-MCP with the satellite-imagery extra:</p> <pre><code>pip install gis-mcp[satellite-imagery]\n</code></pre>"},{"location":"data-gathering/satellite_imagery/#parameters","title":"Parameters","text":"<ul> <li> <p>collection \u2013 STAC collection ID (e.g., <code>\"sentinel-2-l2a\"</code>, <code>\"landsat-8-c2-l2\"</code>) (default: <code>\"sentinel-2-l2a\"</code>) </p> </li> <li> <p>assets \u2013 Bands or asset keys to download (list or comma-separated string).   Common Sentinel-2 keys:  </p> </li> <li><code>B04</code> \u2192 Red  </li> <li><code>B03</code> \u2192 Green  </li> <li><code>B02</code> \u2192 Blue  </li> <li> <p><code>B08</code> \u2192 Near Infrared (NIR) (default: <code>[\"B04\",\"B03\",\"B02\"]</code>) </p> </li> <li> <p>datetime \u2013 Date or date range in ISO 8601.   Examples:  </p> </li> <li><code>\"2025-08-05\"</code> \u2192 single day  </li> <li> <p><code>\"2025-08-01/2025-08-31\"</code> \u2192 range   *(default: <code>\"2024-01-01/2024-12-31\"</code>)  </p> </li> <li> <p>cloud_cover_lt \u2013 Maximum cloud cover percentage (integer).   Use <code>None</code> to disable filtering. (default: <code>20</code>) </p> </li> <li> <p>bbox (optional) \u2013 Bounding box string <code>\"minx,miny,maxx,maxy\"</code> in WGS84 coordinates.  </p> </li> <li> <p>geometry_geojson (optional) \u2013 A GeoJSON geometry (string).   If provided, the image is clipped precisely to this geometry.  </p> </li> <li> <p>out_crs (optional) \u2013 Target CRS for output (e.g., <code>\"EPSG:4326\"</code>).   If omitted, the asset\u2019s native CRS is preserved.  </p> </li> <li> <p>filename (optional) \u2013 Custom filename for the output GeoTIFF. (default: auto-generated from collection, item ID, and asset keys) </p> </li> <li> <p>path (optional) \u2013 Output directory. (default: <code>./data/satellite_imagery</code> inside the package)</p> </li> </ul>"},{"location":"data-gathering/satellite_imagery/#example-usage","title":"Example Usage","text":"<pre><code>Using gis-mcp download Sentinel-2 RGB imagery for Iran during August 2025 with less than 15% cloud cover.\n</code></pre>"},{"location":"examples/","title":"Examples Overview","text":"<p>This section contains practical, step-by-step examples for using GIS MCP Server in real-world geospatial workflows. Each example includes prompts, actions, and video tutorials to help you get started quickly.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":"<ul> <li> <p>Example 1: Basic Spatial Analysis (Claude)</p> </li> <li> <p>Perform buffer and intersection operations on shapefiles (e.g., park and building polygons).</p> </li> <li>Learn how to load shapefiles, buffer geometries, find intersections, and return results in WKT format.</li> <li> <p>Includes a video walkthrough.</p> </li> <li> <p>Example 2: CRS Check, Reprojection, Area &amp; Distance Calculations</p> </li> <li> <p>Check and transform the CRS of a parcel shapefile, calculate area by land use, and measure distances between centroids.</p> </li> <li>Useful for urban planning, cadastral management, and spatial QA.</li> <li> <p>Includes a video walkthrough.</p> </li> <li> <p>Example 3: Movement Analysis (OSMnx)</p> </li> <li> <p>Download and analyze street networks, calculate shortest paths between points, and visualize movement networks.</p> </li> <li>Useful for urban mobility, routing, and network analysis.</li> <li> <p>Includes a video walkthrough.</p> </li> <li> <p>Example 4: Climate Data Download &amp; Analysis</p> </li> <li> <p>Download, visualize, and analyze climate raster data (e.g., Temperature) using GIS MCP Server &amp; Claude Desktop.</p> </li> <li>Learn how to clip rasters, calculate zonal statistics, and export results for further analysis.</li> </ul>"},{"location":"examples/basic_spatial_analysis_claude/","title":"Example 1: Performing Buffer and Intersection Operations on Shapefiles","text":""},{"location":"examples/basic_spatial_analysis_claude/#objective","title":"Objective","text":"<p>In this example, we will perform spatial operations on two shapefiles:</p> <ul> <li>A park polygon (<code>Park.shp</code>).</li> <li>A building polygon (<code>Building.shp</code>).</li> </ul> <p>We will:</p> <ol> <li>Load the shapefiles.</li> <li>Buffer the park polygon by 100 meters.</li> <li>Find the intersection between the buffered park and the building polygon.</li> <li>Return the geometry of the intersection.</li> </ol>"},{"location":"examples/basic_spatial_analysis_claude/#steps","title":"Steps","text":""},{"location":"examples/basic_spatial_analysis_claude/#step-1-load-shapefiles","title":"Step 1: Load Shapefiles","text":"<ul> <li>Action: Load two shapefiles: <code>Park.shp</code> and <code>Building.shp</code> from the specified location. The first shapefile contains the geometry of the park, and the second contains the building's geometry.</li> <li>Prompt: Please load the shapefiles located at <code>E:\\Test\\Example1\\Park.shp</code> and <code>E:\\Test\\Example1\\Building.shp</code> using <code>gis-mcp</code>.</li> </ul>"},{"location":"examples/basic_spatial_analysis_claude/#step-2-buffer-operation","title":"Step 2: Buffer Operation","text":"<ul> <li>Action: Perform a buffer operation on the park geometry, expanding it by 100 meters. This will create a zone around the park.</li> <li>Prompt: Perform a buffer operation with a distance of 100 meters on the geometry of the park (from <code>Park.shp</code>).</li> </ul>"},{"location":"examples/basic_spatial_analysis_claude/#step-3-intersection","title":"Step 3: Intersection","text":"<ul> <li>Action: Find the intersection between the buffered park geometry and the building geometry. This will give us the overlapping area between the park and the building.</li> <li>Prompt: Find the intersection between the buffered geometry of the park and the geometry of the building (from <code>Building.shp</code>).</li> </ul>"},{"location":"examples/basic_spatial_analysis_claude/#step-4-return-the-intersection-geometry","title":"Step 4: Return the Intersection Geometry","text":"<ul> <li>Action: Return the intersection geometry in WKT format. This will represent the region where the buffered park intersects with the building.</li> <li>Prompt: Return the geometry of the intersection as WKT format.</li> </ul>"},{"location":"examples/basic_spatial_analysis_claude/#expected-output","title":"Expected Output","text":"<ul> <li>Buffer Geometry: The geometry of the park will be expanded by 100 meters, creating a buffer zone around it.</li> <li>Intersection Geometry: The area where the buffered park overlaps with the building will be returned as a WKT geometry.</li> </ul>"},{"location":"examples/basic_spatial_analysis_claude/#use-case","title":"Use Case","text":"<p>In environmental management and land-use planning, buffer zones are critical for protecting sensitive natural areas, such as rivers. For example, many countries or regions have legal restrictions on land use within certain distances of rivers to prevent pollution, protect biodiversity, and ensure sustainable land development. By performing a buffer operation around a river's geometry and checking the intersection with nearby development projects, planners can easily identify if any buildings, roads, or other infrastructures are within the protected zone. This ensures that the development does not negatively impact the environment and adheres to local regulations for water protection.</p>"},{"location":"examples/basic_spatial_analysis_claude/#video-tutorial","title":"\ud83d\udcfa Video Tutorial","text":"<p>For a deeper understanding of how these operations work in practice, check out this YouTube video:</p>"},{"location":"examples/climate_data_example/","title":"Example 4: Downloading and Working with Climate Data (GIS MCP Server &amp; Claude Desktop)","text":""},{"location":"examples/climate_data_example/#objective","title":"Objective","text":"<p>In this example, you will learn how to download and analyze climate data using GIS MCP Server and Claude Desktop, as demonstrated in the YouTube video.</p>"},{"location":"examples/climate_data_example/#use-case","title":"Use Case","text":"<p>Climate data analysis is essential for agriculture, environmental monitoring, and urban planning. By automating the download, processing, and analysis of climate rasters, GIS MCP Server and Claude Desktop streamline workflows for researchers and practitioners.</p>"},{"location":"examples/climate_data_example/#video-tutorial","title":"\ud83d\udcfa Video Tutorial","text":"<p>For a full walkthrough, see the YouTube video:</p>"},{"location":"examples/crs_area_distance_analysis/","title":"Example 2: CRS Check, Reprojection, Area &amp; Distance Calculations on a Parcel Shapefile","text":""},{"location":"examples/crs_area_distance_analysis/#objective","title":"Objective","text":"<p>In this example, we will perform spatial QA and measurements on a single shapefile:</p> <p>We will:</p> <ol> <li>Load the shapefile and check its CRS.</li> <li>Transform the coordinates to geographic coordinates.</li> <li>For each polygon, calculate the area (in square meters) of features that meet a specific condition.</li> <li>Calculate the distance (in meters) between the centroids of the parcels.</li> </ol>"},{"location":"examples/crs_area_distance_analysis/#steps","title":"Steps","text":""},{"location":"examples/crs_area_distance_analysis/#step-1-load-shapefile-check-crs","title":"Step 1: Load Shapefile &amp; Check CRS","text":"<ul> <li>Action: Load the shapefile <code>Parcel.shp</code> and report its current Coordinate Reference System (CRS).</li> <li>Prompt: Please load the shapefile located at <code>E:\\Test\\Example2\\Parcel.shp</code> and check/report its CRS using <code>gis-mcp</code>.</li> </ul>"},{"location":"examples/crs_area_distance_analysis/#step-2-transform-coordinates-to-geographic","title":"Step 2: Transform Coordinates to Geographic","text":"<ul> <li>Action: Reproject the shapefile to geographic coordinates (latitude/longitude).</li> <li>Prompt: Please transform the coordinates of <code>E:\\Test\\Example2\\Parcel.shp</code> to geographic coordinates (e.g., WGS 84 / EPSG:4326) using <code>gis-mcp</code>, and save/use the transformed layer for subsequent steps.</li> </ul>"},{"location":"examples/crs_area_distance_analysis/#step-3-area-calculations-by-landuse","title":"Step 3: Area Calculations by Landuse","text":"<ul> <li>Action: For each polygon in the shapefile, compute the area in square meters for parcels with:</li> <li>Landuse = 1 (residential)</li> <li>Landuse = 2 (commercial)</li> <li>Prompt: Using the transformed parcel layer, calculate the area (m\u00b2) of polygons where Landuse = 1 and where Landuse = 2, and return the areas in square meters (per polygon and/or totals).</li> </ul>"},{"location":"examples/crs_area_distance_analysis/#step-4-distance-between-parcel-centroids","title":"Step 4: Distance Between Parcel Centroids","text":"<ul> <li>Action: Identify the parcel(s) with Landuse = 1 and Landuse = 2, compute their centroids, and measure the distance in meters between these centroids.</li> <li>Prompt: Please calculate the distance (meters) between the centroids of the two parcels with Landuse = 1 and Landuse = 2 using the transformed layer, and return the distance.</li> </ul>"},{"location":"examples/crs_area_distance_analysis/#use-case","title":"Use Case","text":"<p>In urban planning and cadastral management, confirming the CRS and ensuring correct reprojection are essential before any measurement. Calculating parcel areas by land-use class supports taxation, zoning compliance, and infrastructure planning. Measuring distances between parcel centroids helps assess proximity\u2014for example, understanding how close residential parcels are to commercial areas for mixed-use planning, access to services, or impact studies.</p>"},{"location":"examples/crs_area_distance_analysis/#video-tutorial","title":"\ud83d\udcfa Video Tutorial","text":"<p>For a deeper understanding of how these operations work in practice, check out this YouTube video:</p>"},{"location":"examples/movement_example/","title":"Example 3: Movement Analysis (OSMnx)","text":"<p>This example demonstrates how to use GIS-MCP's movement tools (powered by OSMnx) to download street networks and calculate shortest paths.</p>"},{"location":"examples/movement_example/#downloading-a-street-network","title":"Downloading a Street Network","text":"<p>Prompt:</p> <pre><code>download the street network for Berlin and save as Graph file. Please use gis mcp tools\n</code></pre> <p>Action:</p> <ul> <li>The tool will use OSMnx to download the drivable street network for Berlin and save it as a GraphML file.</li> </ul>"},{"location":"examples/movement_example/#calculating-a-shortest-path","title":"Calculating a Shortest Path","text":"<p>Prompt:</p> <pre><code>Use gis-mcp. calculate the shortest path between (52.5200, 13.4050) and (52.5155, 13.3777) using the saved Berlin driving network.\n</code></pre> <p>Action:</p> <ul> <li>The tool will load the saved GraphML file and compute the shortest path between the two points using OSMnx and NetworkX.</li> </ul>"},{"location":"examples/movement_example/#notes","title":"Notes","text":"<ul> <li>OSMnx supports various network types: \"drive\", \"walk\", \"bike\", etc.</li> <li>The output path is a list of node IDs; you can visualize it using OSMnx plotting functions or export to other formats.</li> </ul>"},{"location":"install/","title":"Overview","text":""},{"location":"install/#installations-overview","title":"Installations Overview","text":"<p>Pick the path that matches your setup:</p> <ul> <li>Smithery - see Smithery</li> <li>pip install with client configuration: see pip</li> <li>Development (editable) install with client configuration: see Developers</li> </ul>"},{"location":"install/developers/","title":"Dev install","text":""},{"location":"install/developers/#development-install-editable","title":"Development install (editable)","text":"<ol> <li>Create env and install in editable mode:</li> </ol> <pre><code>pip install uv\nuv venv --python=3.10\nuv pip install -e .\n</code></pre> <ol> <li>Run the server from source:</li> </ol> <pre><code>python -m gis_mcp\n</code></pre>"},{"location":"install/developers/#development-client-configuration","title":"Development client configuration","text":"<p>Claude Desktop (Windows):</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\path\\\\to\\\\gis-mcp\\\\.venv\\\\Scripts\\\\python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n</code></pre> <p>Claude Desktop (Linux/Mac):</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/path/to/gis-mcp/.venv/bin/python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n</code></pre> <p>Cursor IDE (Windows) \u2013 <code>.cursor/mcp.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\path\\\\to\\\\gis-mcp\\\\.venv\\\\Scripts\\\\python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n</code></pre> <p>Cursor IDE (Linux/Mac) \u2013 <code>.cursor/mcp.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/path/to/gis-mcp/.venv/bin/python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n</code></pre> <p>Notes:</p> <ul> <li>Ensure paths point to your actual environment/project</li> <li>Restart the IDE to apply changes</li> </ul>"},{"location":"install/pip/","title":"PIP","text":""},{"location":"install/pip/#install-via-pip-with-uv","title":"Install via pip (with uv)","text":"<p>This video teaches you the installation of GIS MCP Server on your windows and Claude Desktop:</p> <ol> <li>Install uv and create a virtual environment (Python 3.10+):</li> </ol> <pre><code>pip install uv\nuv venv --python=3.10\n</code></pre> <ol> <li>Install the package:</li> </ol> <pre><code>uv pip install gis-mcp\n</code></pre> <ol> <li>Run the server:</li> </ol> <pre><code>gis-mcp\n</code></pre>"},{"location":"install/pip/#client-configuration-for-pip-installs","title":"Client configuration for pip installs","text":"<p>Claude Desktop (Windows):</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\Users\\\\YourUsername\\\\.venv\\\\Scripts\\\\gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n</code></pre> <p>Claude Desktop (Linux/Mac):</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/home/YourUsername/.venv/bin/gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n</code></pre> <p>Cursor IDE (Windows) \u2013 <code>.cursor/mcp.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\Users\\\\YourUsername\\\\.venv\\\\Scripts\\\\gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n</code></pre> <p>Cursor IDE (Linux/Mac) \u2013 <code>.cursor/mcp.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/home/YourUsername/.venv/bin/gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n</code></pre> <p>Notes:</p> <ul> <li>Replace <code>YourUsername</code> with your actual user name</li> <li>Restart your IDE after adding configuration</li> </ul>"},{"location":"install/smithery/","title":"Smithery","text":""},{"location":"install/smithery/#install-via-smithery","title":"Install via Smithery","text":"<p>Installs and wires the server into Claude Desktop automatically.</p> <pre><code>npx -y @smithery/cli install @mahdin75/gis-mcp --client claude\n</code></pre> <p>Start the server from Claude when prompted, or run it directly once installed:</p> <pre><code>gis-mcp\n</code></pre>"}]}